//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var image: image { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.image` struct is generated, and contains static references to 20 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `arrowRight`.
    var arrowRight: RswiftResources.ImageResource { .init(name: "arrowRight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back`.
    var back: RswiftResources.ImageResource { .init(name: "back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `close`.
    var close: RswiftResources.ImageResource { .init(name: "close", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cloud`.
    var cloud: RswiftResources.ImageResource { .init(name: "cloud", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `completed`.
    var completed: RswiftResources.ImageResource { .init(name: "completed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `downArrow`.
    var downArrow: RswiftResources.ImageResource { .init(name: "downArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hamburger`.
    var hamburger: RswiftResources.ImageResource { .init(name: "hamburger", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home`.
    var home: RswiftResources.ImageResource { .init(name: "home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `marked`.
    var marked: RswiftResources.ImageResource { .init(name: "marked", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `options`.
    var options: RswiftResources.ImageResource { .init(name: "options", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `paused`.
    var paused: RswiftResources.ImageResource { .init(name: "paused", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `refDownload`.
    var refDownload: RswiftResources.ImageResource { .init(name: "refDownload", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `refMore`.
    var refMore: RswiftResources.ImageResource { .init(name: "refMore", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `refPlaylist`.
    var refPlaylist: RswiftResources.ImageResource { .init(name: "refPlaylist", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `refSettings`.
    var refSettings: RswiftResources.ImageResource { .init(name: "refSettings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reorder`.
    var reorder: RswiftResources.ImageResource { .init(name: "reorder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `resumed`.
    var resumed: RswiftResources.ImageResource { .init(name: "resumed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `search`.
    var search: RswiftResources.ImageResource { .init(name: "search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `unmarked`.
    var unmarked: RswiftResources.ImageResource { .init(name: "unmarked", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `videos`.
    var videos: RswiftResources.ImageResource { .init(name: "videos", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.file` struct is generated, and contains static references to 2 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `README.md`.
    var readmeMd: RswiftResources.FileResource { .init(name: "README", pathExtension: "md", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"

      var loading: RswiftResources.StoryboardViewControllerIdentifier<LoadingViewController> { .init(identifier: "Loading", storyboard: name, bundle: bundle) }

      func validate() throws {
        if loading() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loading' could not be loaded from storyboard 'Main' as 'LoadingViewController'.") }
      }
    }
  }
}